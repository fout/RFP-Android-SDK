<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TOP on RFP-Android-SDK Docs</title>
    <link>https://fout.github.io/RFP-Android-SDK/en/</link>
    <description>Recent content in TOP on RFP-Android-SDK Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    
	<atom:link href="https://fout.github.io/RFP-Android-SDK/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Acquisition of advertising framework Id</title>
      <link>https://fout.github.io/RFP-Android-SDK/en/programming-guide/2_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fout.github.io/RFP-Android-SDK/en/programming-guide/2_2/</guid>
      <description>In addition to Media ID acquisition, register the advertising framework in advance. Set the following information to output the advertising framework Id.
 Advertising framework name Advertising format(necessary only for simple In-Feed advertisements described later) Number of advertising cases Advertising placement sequence HTML (only when using WebView format)  Because this is linked to real cases, the number of cases may be less than the ones described below. Contact the representative at this time.</description>
    </item>
    
    <item>
      <title>Simple infeed advertising</title>
      <link>https://fout.github.io/RFP-Android-SDK/en/programming-guide/2_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fout.github.io/RFP-Android-SDK/en/programming-guide/2_3/</guid>
      <description>Display of simple infeed advertising Acquisition of events when displaying simple infeed advertising Simple infeed advertising additional load Usable simple infeed advertising format  Simple implementation is possible when using the view components, including ListView and ArrayAdapter.

Displaying simple infeed advertising Implement the following using RFPInstreamAdAdapter to display infeed advertising.
// (1) Importing the necessary packages import jp.fout.rfp.android.sdk.RFP; import jp.fout.rfp.android.sdk.instream.ADVSInstreamAdAdapter; public class MyActivity extends Activity { // (2) RFPInstreamAdAdapter definition private RFPInstreamAdAdapter&amp;lt;ArrayAdapter&amp;gt; rfpAdapter; @Override public void onCreate(Bundle savedInstanceState) { .</description>
    </item>
    
    <item>
      <title>Customized infeed advertising</title>
      <link>https://fout.github.io/RFP-Android-SDK/en/programming-guide/2_4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fout.github.io/RFP-Android-SDK/en/programming-guide/2_4/</guid>
      <description>Loading customized infeed advertising Parameters used to display customized infeed advertising Displaying customized infeed advertising Support for GIF advertising Acquisition of advertising ID  When you wish to display in a more flexible way than with simple infeed advertising, it is possible to use a customized infeed advertising function.
Be sure to include a description in implementation so that the user recognizes and understands that the implemented advertising location is for an advertisement.</description>
    </item>
    
    <item>
      <title>Support for video advertising</title>
      <link>https://fout.github.io/RFP-Android-SDK/en/programming-guide/2_5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fout.github.io/RFP-Android-SDK/en/programming-guide/2_5/</guid>
      <description>Components provided by an advertising-compatible SDK Registration of VideoAdActivity Video advertising judgments Process video advertising information with VideoAdView Changing the text for the buttons located in video advertising Playing the video Resuming from full-screen mode Playback control when transferring mode Customizing video area tap behavior Support for video advertising loading errors Cache settings Resuming video when it is reattach to the view  Components provided in the video support SDK VideoAdView: This is the Custom View for video playback and sending tracking events.</description>
    </item>
    
    <item>
      <title>Set HTTP request timeout interval</title>
      <link>https://fout.github.io/RFP-Android-SDK/en/programming-guide/2_6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fout.github.io/RFP-Android-SDK/en/programming-guide/2_6/</guid>
      <description>Set HTTP request timeout interval  
Set HTTP request timeout interval (Can be used on v3.3.0 or later)
Your app can use the setHttpRequestTimeoutInterval to set HTTP request&amp;rsquo;s timeout interval in RFP.
public class MyActivity extends Activity { ... // â€»Be sure to set the setHttpRequestTimeoutInterval before RFP.init RFP.setHttpRequestTimeoutInterval(15); //set HTTP request interval to 15s RFP.init(this.getApplicationContext(), &amp;quot;YOUR_MEDIA_ID&amp;quot;); int interval = RFP.getHttpRequestTimeoutInterval(); // Acquire current setting value ... }  Points to note when setting the timeout interval  A very short interval could lead to failed to get ads.</description>
    </item>
    
  </channel>
</rss>